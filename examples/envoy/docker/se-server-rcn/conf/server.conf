# Scytale Server configuration for the x509pop node attestor.
#
# Assumptions:  Workloads are run on Unix instances.
#
# Fields that must be edited:
#   trust_domain: SPIFFE trust domain that the Scytale Server and Scytale Agent use
#   ca_bundle_path in the x509pop NodeAttestor plugin. Set to the path of your CA
#     bundle.
#   saas_address: Use the address provided by Scytale for your specific installation
#
# For production use, configure a DataStore plugin other than SQLite, and use correct
# ca_subject values.  It is recommended to use the awssecret UpstreamCA plugin for
# production AWS installations.

server {
  # Unix domain socket for server management API
  manage_uds_path = "/opt/scytale/sockets/server/manage.sock"

  # Listening IP address of the Scytale Server
  bind_address = "0.0.0.0"

  # HTTP listening port number of the Scytale Server
  bind_port = "8081"

  #  The trust domain that this server belongs to
  trust_domain = "trust01.ryan.net"

  # Directory use for Scytale Server runtime data
  data_dir = "/opt/scytale/data/server"


  # Scytale Console API Address (central management component)
  saas_address = "api.demo.scytale.io:443"

  # default TTL applied to server and agent SVIDs.
  # Also the default TTL applied to workload SVIDs with Workload TTL set to 0
  # Values can be set in hours (h), minutes (m) or seconds (s)
  svid_ttl = "1h"

  # Subject that CA certificates should use
  ca_subject = {
    # Array of Country values [space or comma separated]
    Country = ["US"]

    # Array of Organization values
    Organization = ["MyOrg"]

    # Common Name Value (optional)
    CommonName = ""
  }

  # log_file: file to write logs to.  STDOUT by default
  # log_file = "/opt/scytale/logs/server/server.log"

  # log_level Sets the logging level <DEBUG|INFO|WARN|ERROR>
  # default INFO
  # log_level = "INFO"

  # enable_sds:  set to true if using the SDS API on the Envoy proxy
  # enable_sds = false

}

plugins {
  # SQL database storage for server datastore, options include SQLite,
  # PostgreSQL and MySQL.  The sqlite3 value here should only be used for
  # testing; it's not suitable for production use.
  DataStore "sql" {
    plugin_data {
      # configures datastore type
      database_type = "sqlite3"

      # connection_string configured here to be a database file
      connection_string = "/opt/scytale/conf/data/datastore.sqlite3"
    }
  }
  # Postgres DB configuration
  # For an insecure test setup, do the following commands:
  # psql postgres
  # postgres=# CREATE DATABASE scytale_development;
  # postgres=# CREATE USER scytale;
  # postgres=# GRANT ALL PRIVILEGES ON DATABASE scytale_development TO scytale;

  # DataStore "sql" {
  #      plugin_data {
  #         database_type = "postgres"
  #         connection_string = "dbname=scytale_development user=scytale host=X.X.X.X sslmode=disable"
  #    }
  #  }
  # For production Postgres replace the connection_string value above with a secure one
  # https://github.com/spiffe/spire/blob/master/doc/plugin_server_datastore_sql.md

  # MySql configuration
  # For an insecure test setup, do the following commands
  # mysql -u root
  # mysql> CREATE DATABASE scytale_development;
  # mysql> CREATE USER 'scytale'@'localhost';
  # mysql> GRANT ALL PRIVILEGES ON scytale_development.* TO 'scytale'@'localhost'
  # mysql> FLUSH PRIVILEGES;
  # DataStore "sql" {
  #   plugin_data {
  #     database_type = "mysql"
  #     connection_string = "scytale:@tcp(X.X.X.X)/scytale_development?parseTime=true"
  #   }
  # }
  # For production MySql replace the connection_string value above with a secure one
  # https://github.com/spiffe/spire/blob/master/doc/plugin_server_datastore_sql.md


  # A node attestor which attests agent identity using x509 Proof of
  # Possession
  NodeAttestor "x509pop" {
    plugin_data {
      # The path to the trusted CA bundle on disk. The file must contain
      #   one or more PEM blocks forming the set of trusted root CA's
      #   for chain-of-trust verification.  Edit this line to match the
      #   filename and location fo your bundle.
            ca_bundle_path = "/opt/scytale/conf/server/rootCA.crt"
    }
  }

  NodeResolver "noop" {
    plugin_data {}
  }

  # A key manager plugin maintains private keys that are persisted to disk
  KeyManager "disk" {
    plugin_data = {
      # Path to the Keys file on disk
      keys_path = "/opt/scytale/data/server/keys/td_authority.key"
    }
  }
  # KeyManager "memory" {
  #    plugin_data = {
  #    }
  # }

  # plugin loads root CA credentials from disk, uses them to generate
  # intermediate signing certificates for the server's signing authority.
  # The crt file must be copied to each of the agents for bootstrapping
  # if this plugin is used.
  # Alternatively, use another UpstreamCA plugin, or use no UpstreamCA plugin and
  # use the command:
  #   scytale-server bundle show > bundle.pem
  #   (see https://github.com/spiffe/spire/blob/master/doc/spire_server.md#spire-server-bundle-show)
  # to extract a short-lived bundle which can be used in the agent's trust_bundle_path configuration
  # field.  Keep in mind that since the bundles exracted that way are short-lived, it will be
  # necessary to provide a means of automatically provisioning agent instances with an up-to-date
  # bundle at agent startup.
## commented out by ryan per max's request
##  UpstreamCA "disk" {
##    plugin_data {
##      # The TTL for issued certificates
##      # Values can be set in hours (h), minutes (m) or seconds (s)
##      ttl = "12h"
##
##      # Path to the "upstream" CA certificate
##      key_file_path = "/opt/scytale/conf/server/bootstrap_ca.key"
##
##      # Path to the "upstream" CA key file
##      cert_file_path = "/opt/scytale/conf/server/bootstrap_ca.crt"
##    }
##  }
  # awssecret plugin uses the AWS Secrets Manager for the root bundle.
  # See https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html for documention
  # on the AWS Secrets Manager and
  # https://github.com/spiffe/spire/blob/master/doc/plugin_server_upstreamca_awssecret.md
  # for documentation on the plugin.  The agents will need to have the bundle pulled from
  # the AWS Secrets Manager placed in the path desgnagted by the trust_bundle_path field
  # in the agent configuration file at agent startup.
  # UpstreamCA "awssecret" {
  #   plugin_data {
  #     ttl = "1h",
  #     region = "us-west-2",
  #     cert_file_arn = "cert",
  #     key_file_arn = "key",
  #     access_key_id = "ACCESS_KEY_ID",
  #     secret_access_key = "SECRET_ACCESS_KEY",
  #     secret_token = "SECRET_TOKEN"
  #   }
  # }
}

